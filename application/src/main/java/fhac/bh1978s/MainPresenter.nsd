<?xml version="1.0" encoding="UTF-8"?>
	<jprogram code="&#34;// package and import&#34;,&#34;package fhac.bh1978s;&#34;,&#34;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.generatorexception.CalculationException;&#34;,&#34;import fhac.bh1978s.programexception.ZufallMappingException;&#34;,&#34;import fhac.bh1978s.view.TextFile;&#34;,&#34;import fhac.bh1978s.view.TextFileReader;&#34;,&#34;import fhac.bh1978s.view.TextFileWriter;&#34;,&#34;import fhac.bh1978s.view.interfaces.I_FileReader;&#34;,&#34;import fhac.bh1978s.view.interfaces.I_FileWriter;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.mapper.ZufallDataInputMapper;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.mapper.ZufallErgebnisOutputMapper;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.mapper.interfaces.I_InputMapper;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.mapper.interfaces.I_OutputMapper;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.model.ZufallData;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.model.ZufallErgebnisData;&#34;,&#34;import fhac.bh1978s.zufallsgenerator.presenter.ZufallsgeneratorPresenter;&#34;,&#34;import java.util.ArrayList;&#34;,&#34;import java.util.List;&#34;" comment="&#34;@source: C:\Gothaer\home\Projects\go-pro-pruefung\application\src\main\java\fhac\bh1978s\MainPresenter.nsd&#34;,&#34;@JStruct: 1.02.01 Parser: javac 1.8.0_31&#34;" font="SansSerif" fontSize="14" >
		<children>
		<jclass code="&#34;public class MainPresenter;&#34;,&#34;/* class global variables */&#34;,&#34;private static MainPresenter mainPresenter = new MainPresenter();&#34;,&#34;private I_FileReader&#60;TextFile&#62; fileReader = TextFileReader.getInstance();&#34;,&#34;private I_FileWriter&#60;TextFile&#62; fileWriter = TextFileWriter.getInstance();&#34;,&#34;private I_InputMapper&#60;TextFile, ZufallData&#62; internMapper = new ZufallDataInputMapper();&#34;,&#34;private I_OutputMapper&#60;ZufallErgebnisData, TextFile&#62; externMapper = new ZufallErgebnisOutputMapper();&#34;" comment="&#34; Haupt-Verarbeitungspresenter vom MVC-Pattern als Singleton-Pattern-Style implementiert. Dieser&#34;,&#34; dient als Verarbeitungsschnittstelle zwischen der View (Eingabe/Ausgabe) und den Models.&#34;" status="open" color="ffffff" >
			<methods>
			<method code="&#34;public static  MainPresenter getInstance()&#34;" comment="" status="open" color="ffffff" >
				<body>
					<instruction code="&#34;return mainPresenter;&#34;" comment="" color="ffffff" ></instruction>
				</body>
			</method>
			<method code="&#34;private  MainPresenter()&#34;" comment="" status="open" color="ffffff" >
				<body>
					<instruction code="&#34; /* empty statement */ &#34;" comment="" color="ffffff" ></instruction>
				</body>
			</method>
			<method code="&#34;public  void start()&#34;" comment="&#34; Start-Methode des Haupt-Verarbeitungspresenters. Diese dient als Verarbeitungsschnittstelle&#34;,&#34; zwischen dem Lesen/Schreiben von Dateien, dem Mappen von Datenstrukturen, als auch der&#34;,&#34; Deligierung an weitere Presenter.&#34;" status="open" color="ffffff" >
				<body>
					<instruction code="&#34;Leere Ausgabepfad&#34;" comment="&#34;&#34;" color="ffffff" ></instruction>
					<instruction code="&#34;textFileContent := FileReader::readAllFiles()&#34;" comment="&#34;&#34;" color="ffffff" ></instruction>
					<instruction code="&#34;textfileOutput := Liste aller Ergebnisfiles&#34;" comment="&#34;&#34;" color="ffffff" ></instruction>
					<instruction code="&#34;textFileContent.forEach((textFile)-&#62;{&#34;,&#34;    if (textFile.isError()) {&#34;,&#34;        System.out.println(&#34;&#34;ERR:\tFehler beim Lesen der Datei &#60;&#34;&#34; + textFile.getName() + &#34;&#34;&#62;. Fehlermeldung befindet sich in der Ausgabe-Datei.&#34;&#34;);&#34;,&#34;        textfileOutput.add(textFile);&#34;,&#34;    } else {&#34;,&#34;        try {&#34;,&#34;            ZufallData zufallData = internMapper.mapToInternFormat(textFile);&#34;,&#34;            ZufallsgeneratorPresenter zufallsgenerator = new ZufallsgeneratorPresenter(zufallData);&#34;,&#34;            ZufallErgebnisData zufallErgebnisData = zufallsgenerator.generiere();&#34;,&#34;            TextFile ergebnisTextFile = new TextFile(textFile.getName());&#34;,&#34;            ergebnisTextFile.setContent(buildInputHeader(textFile));&#34;,&#34;            ergebnisTextFile.addContent(externMapper.mapToExternFormat(zufallErgebnisData).getContent());&#34;,&#34;            textfileOutput.add(ergebnisTextFile);&#34;,&#34;            System.out.println(&#34;&#34;Datei &#60;&#34;&#34; + textFile.getName() + &#34;&#34;&#62; berechnet. Ergebnis befindet sich im Ausgabe-Pfad.&#34;&#34;);&#34;,&#34;        } catch (ZufallMappingException zme) {&#34;,&#34;            System.out.println(&#34;&#34;ERR:\tSemantikfehler in der Datei &#60;&#34;&#34; + textFile.getName() + &#34;&#34;&#62; entdeckt. Details stehen in der Ausgabe-Datei.&#34;&#34;);&#34;,&#34;            TextFile errorTextFile = new TextFile(textFile.getName());&#34;,&#34;            errorTextFile.setContent(buildInputHeader(textFile) + &#34;&#34;Fehlermeldung:\n&#34;&#34; + zme.getMessage());&#34;,&#34;            textfileOutput.add(errorTextFile);&#34;,&#34;        } catch (CalculationException be) {&#34;,&#34;            System.out.println(&#34;&#34;ERR:\tBerechnungsfehler in der Datei &#60;&#34;&#34; + textFile.getName() + &#34;&#34;&#62;. Details in der Ausgabe-Datei.&#34;&#34;);&#34;,&#34;            TextFile errorTextFile = new TextFile(textFile.getName());&#34;,&#34;            errorTextFile.setContent(buildInputHeader(textFile) + &#34;&#34;Fehlermeldung:\nFehler beim Berechnen - Berechnung konnte nicht durchgef\u00fchrt werden.\n\nDetails:\n&#34;&#34; + be.getMessage());&#34;,&#34;            textfileOutput.add(errorTextFile);&#34;,&#34;        } finally {&#34;,&#34;            fileWriter.saveFiles(textfileOutput);&#34;,&#34;        }&#34;,&#34;    }&#34;,&#34;});&#34;" comment="" color="ffffff" ></instruction>
				</body>
			</method>
			<method code="&#34;private  String buildInputHeader(final TextFile textFile)&#34;" comment="&#34; Auslagerungsmethode für String-Building eines Headers für die Ausgabedatei.&#34;,&#34;&#34;,&#34; @param textFile&#34;,&#34; @return&#34;" status="open" color="ffffff" >
				<body>
					<instruction code="&#34;return &#34;&#34;-----INPUT-----\n&#34;&#34; + textFile.getContent() + &#34;&#34;\n\n-----OUTPUT-----\n&#34;&#34;;&#34;" comment="" color="ffffff" ></instruction>
				</body>
			</method>
			</methods>
		</jclass>
		</children>
	</jprogram>